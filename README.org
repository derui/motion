* An simple vim-like motion library
This package provides a function set to define and use motion that is like vim's it.

- No any third package requires
- Framework-agnostic
- Very simple and fast


* Install
This package do not publish any other package registries. Please install via package manager that supports installing package from version control system such as git.

#+begin_src emacs-lisp
  ;; For elpaca user
  (elpaca (motion :type git :host github :repo "derui/motion"))
#+end_src

* Usage
No any default motion implementation provides from this package. User *must* define motion as you like.

** Define motion
Define motion with ~motion-define~ macro. This macro can define 4 pattern motion at once. Types of motion defined by macro are ~:forward~, ~:backward~, ~:inner~ and ~:outer~.

Example:

#+begin_src emacs-lisp
  (motion-define name-of-motion
      "docstring of motion"
    :forward
    (let ((s (point)))
      (forward-word)
      (cons s (point)))
    )
#+end_src

~motion-define~ macro defines ~<name-of-motion>-forward/backward/around-inner/around-outer~ functions at once. If you do not pass definition of motion with parameter symbol, that type ignores from macro.

*** Internal arguments
Definitions can use pre-defined arguments that are named ~operator~ and ~args~ . The argument ~operator~ is required argument of the function, and it is used by internal. But user can manipulate this function before macro uses.

The second argument ~args~ is optional argument of the function. It

*** Define motion with thing
If you are familiar with ~thing-at-point~, you can define motion with helper macro, ~motion-define-thing~ like below.

#+begin_src emacs-lisp
  (motion-define-thing word-by-thing 'word)

  ;; defines all of motions with thing
  (word-by-thing-forward #'kill-ring-save)
  (word-by-thing-backward #'kill-ring-save)

  ;; Notice, thing do not or can not care about inner/outer region.
  ;; That's because why inner/outer functions has same behavior
  (word-by-thing-around-inner #'kill-ring-save)
  (word-by-thing-around-outer #'kill-ring-save)
#+end_src

*** Define motion with pair
If you want to define motion between characters, such as single-quote( ~'~ ), double-quote( ~"~ ), or braces, you can define it with ~motion-define-pair~ .

#+begin_src emacs-lisp
  ;; single quote motion between a same line
  (motion-define-pair single-quote (?' . ?'))

  ;; double quote motion between whole buffer
  (motion-define-pair double-quote (?\" . ?\") t)

  ;; motion-define-pair defines only around-inner and around-outer functions.
  (single-quote-around-inner #'kill-ring-save)

  ;; -around-inner function gets INNER BOUNDS of between characters, like '|text|'
  ;; -around-outer function gets OUTER BOUNDS of between characters, like |'text'|
  ;; ( pipe (|) is a region of motion)
#+end_src

** Use motion
Defined motion uses as normal function. All of functions has same argument definition that it is ~(operator &rest args)~ .

#+begin_quote
All motion functions defined by macro are *NOT* command. It can not use with keybind directly. 
#+end_quote

#+begin_src emacs-lisp
  (setq motion-function
        (motion-word-forward (lambda (s e)
                               (format "region from motion is: (%s, %s)" s e))))

  ;; get region by motion, then apply operator passed like below.
  (motion-function)
#+end_src

Operator passed by user should have two arguments that holds region defined by callee motion.

*** With other libraries
This library aims to use with other libraries that defines modal-editing system such as [[https://github.com/mrkkrp/modalka][modalka]], [[https://github.com/Kungsgeten/ryo-modal][ryo-modal]], [[https://gitlab.com/matsievskiysv/multistate][multistate]] or others. All functions returns higher-ordered command.

#+begin_src emacs-lisp
  ;; modalka

  (motion-define word
      "for word"
    :forward
    (let ((s (point)))
      (forward-word)
      (cons s (point))))

  ;; yank word from current point
  (keymap-set 'modalka-mode-map "y w" (word-forward (lambda (s e) (kill-ring-save s e))))
#+end_src
